{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"getting-started/hello-world/","text":"Hello, world! \u00b6 The first program most people ever write is a simple \"Hello, world!\" program, and here is how you would do it in Wally: This program prints \"Hello, world!\" to the console, and then exits with a return code of 0. fn main ( args : array < string > ) : int { println ( \"Hello, world!\" ); return 0 ; }","title":"Hello World"},{"location":"getting-started/hello-world/#hello-world","text":"The first program most people ever write is a simple \"Hello, world!\" program, and here is how you would do it in Wally: This program prints \"Hello, world!\" to the console, and then exits with a return code of 0. fn main ( args : array < string > ) : int { println ( \"Hello, world!\" ); return 0 ; }","title":"Hello, world!"},{"location":"getting-started/installation/","text":"Installation \u00b6 Download the latest release from the releases page and extract it to a folder of your choice.","title":"Installation"},{"location":"getting-started/installation/#installation","text":"Download the latest release from the releases page and extract it to a folder of your choice.","title":"Installation"},{"location":"getting-started/wally-cli/","text":"Wally CLI \u00b6 The Wally CLI is a command line interface for the Wally programming language. It is used to compile and run Wally programs. Installation \u00b6 Download the latest release from the releases page and extract it to a folder of your choice. Usage \u00b6 To compile a Wally program, run the following command: wallyc <file> -o <output> Where <file> is the path to the Wally program you want to compile, and <output> is the path to the output file.","title":"Wally CLI"},{"location":"getting-started/wally-cli/#wally-cli","text":"The Wally CLI is a command line interface for the Wally programming language. It is used to compile and run Wally programs.","title":"Wally CLI"},{"location":"getting-started/wally-cli/#installation","text":"Download the latest release from the releases page and extract it to a folder of your choice.","title":"Installation"},{"location":"getting-started/wally-cli/#usage","text":"To compile a Wally program, run the following command: wallyc <file> -o <output> Where <file> is the path to the Wally program you want to compile, and <output> is the path to the output file.","title":"Usage"},{"location":"getting-started/wally-editor/","text":"Wally Editor \u00b6 The Wally Editor is a work in progress. It is not yet ready for use.","title":"Wally Editor"},{"location":"getting-started/wally-editor/#wally-editor","text":"The Wally Editor is a work in progress. It is not yet ready for use.","title":"Wally Editor"},{"location":"language/access-modifiers/","text":"Access Modifiers \u00b6 Warning Wally is still in development, and the syntax and features are subject to change. Wally has two access modifiers: public and private . These are used to control the visibility of classes, functions, and variables. Public \u00b6 A public member is accessible from anywhere. This is the default access modifier for classes and functions. Private \u00b6 A private member is only accessible from within the class that it is declared in. This is the default access modifier for variables. Examples \u00b6 class Person { // public by default priv var name : string ; // This variable is private pub var age : int ; // This variable is public constructor ( name : string , age : int ) { this . name = name ; this . age = age ; } pub fn getName (): string { return name ; } pub fn setName ( newName : string ): void { name = newName ; } pub fn getAge (): int { return age ; } pub fn setAge ( newAge : int ): void { age = newAge ; } pub override fn toString (): string { return \"Name: \" + name + \", Age: \" + age ; } }","title":"Access Modifiers"},{"location":"language/access-modifiers/#access-modifiers","text":"Warning Wally is still in development, and the syntax and features are subject to change. Wally has two access modifiers: public and private . These are used to control the visibility of classes, functions, and variables.","title":"Access Modifiers"},{"location":"language/access-modifiers/#public","text":"A public member is accessible from anywhere. This is the default access modifier for classes and functions.","title":"Public"},{"location":"language/access-modifiers/#private","text":"A private member is only accessible from within the class that it is declared in. This is the default access modifier for variables.","title":"Private"},{"location":"language/access-modifiers/#examples","text":"class Person { // public by default priv var name : string ; // This variable is private pub var age : int ; // This variable is public constructor ( name : string , age : int ) { this . name = name ; this . age = age ; } pub fn getName (): string { return name ; } pub fn setName ( newName : string ): void { name = newName ; } pub fn getAge (): int { return age ; } pub fn setAge ( newAge : int ): void { age = newAge ; } pub override fn toString (): string { return \"Name: \" + name + \", Age: \" + age ; } }","title":"Examples"},{"location":"language/functions/","text":"Functions \u00b6 Warning Wally is still in development, and the syntax and features are subject to change. Wally is a functional programming language. This means that functions are first class citizens. This means that functions can be passed as arguments to other functions, and can be returned from other functions. Functions can also be assigned to variables. Declaring a function \u00b6 A function can be declared using the fn keyword. The syntax for declaring a function is as follows: fn <name>(<args>): <return type> { <body> } Where <name> is the name of the function, <args> is the arguments of the function, <return type> is the return type of the function, and <body> is the body of the function. For example: fn add(x: int, y: int): int { return x + y; } Calling a function \u00b6 A function can be called using the () operator. The syntax for calling a function is as follows: <name>(<args>); Where <name> is the name of the function, and <args> is the arguments of the function. For example: add(5, 10); Returning a value from a function \u00b6 A value can be returned from a function using the return keyword. The syntax for returning a value from a function is as follows: return <value>; Where <value> is the value to return. For example: fn add(x: int, y: int): int { return x + y; } Anonymous functions \u00b6 Anonymous functions are functions that do not have a name. They can be assigned to variables, and can be passed as arguments to other functions. The syntax for declaring an anonymous function is as follows: fn(<args>): <return type> { <body> } Where <args> is the arguments of the function, <return type> is the return type of the function, and <body> is the body of the function. For example: var add = fn(x: int, y: int): int { return x + y; }; Function parameters \u00b6 A function can have zero or more parameters. The syntax for declaring a function parameter is as follows: <name>: <type> Where <name> is the name of the parameter, and <type> is the type of the parameter. For example: fn add(x: int, y: int): int { return x + y; } Access modifiers \u00b6 A functions default access modifier is pub . This means that the function can be called from anywhere. But if you want to restrict the access to the function, you can use the priv access modifier. The syntax for declaring a private function is as follows: Note: Private functions can only be called from within the same module. For more information about access modifiers, see the Access modifiers page. priv fn <name>(<args>): <return type> { <body> } Where <name> is the name of the function, <args> is the arguments of the function, <return type> is the return type of the function, and <body> is the body of the function. For example: priv fn add(x: int, y: int): int { return x + y; } Function overloading \u00b6 A function can be overloaded. This means that a function can have multiple definitions. The syntax for declaring a function overload is as follows: fn <name>(<args>): <return type> { <body> } fn <name>(<args>): <return type> { <body> } Where <name> is the name of the function, <args> is the arguments of the function, <return type> is the return type of the function, and <body> is the body of the function. For example: fn add(x: int, y: int): int { return x + y; } fn add(x: int, y: int, z: int): int { return x + y + z; }","title":"Functions"},{"location":"language/functions/#functions","text":"Warning Wally is still in development, and the syntax and features are subject to change. Wally is a functional programming language. This means that functions are first class citizens. This means that functions can be passed as arguments to other functions, and can be returned from other functions. Functions can also be assigned to variables.","title":"Functions"},{"location":"language/functions/#declaring-a-function","text":"A function can be declared using the fn keyword. The syntax for declaring a function is as follows: fn <name>(<args>): <return type> { <body> } Where <name> is the name of the function, <args> is the arguments of the function, <return type> is the return type of the function, and <body> is the body of the function. For example: fn add(x: int, y: int): int { return x + y; }","title":"Declaring a function"},{"location":"language/functions/#calling-a-function","text":"A function can be called using the () operator. The syntax for calling a function is as follows: <name>(<args>); Where <name> is the name of the function, and <args> is the arguments of the function. For example: add(5, 10);","title":"Calling a function"},{"location":"language/functions/#returning-a-value-from-a-function","text":"A value can be returned from a function using the return keyword. The syntax for returning a value from a function is as follows: return <value>; Where <value> is the value to return. For example: fn add(x: int, y: int): int { return x + y; }","title":"Returning a value from a function"},{"location":"language/functions/#anonymous-functions","text":"Anonymous functions are functions that do not have a name. They can be assigned to variables, and can be passed as arguments to other functions. The syntax for declaring an anonymous function is as follows: fn(<args>): <return type> { <body> } Where <args> is the arguments of the function, <return type> is the return type of the function, and <body> is the body of the function. For example: var add = fn(x: int, y: int): int { return x + y; };","title":"Anonymous functions"},{"location":"language/functions/#function-parameters","text":"A function can have zero or more parameters. The syntax for declaring a function parameter is as follows: <name>: <type> Where <name> is the name of the parameter, and <type> is the type of the parameter. For example: fn add(x: int, y: int): int { return x + y; }","title":"Function parameters"},{"location":"language/functions/#access-modifiers","text":"A functions default access modifier is pub . This means that the function can be called from anywhere. But if you want to restrict the access to the function, you can use the priv access modifier. The syntax for declaring a private function is as follows: Note: Private functions can only be called from within the same module. For more information about access modifiers, see the Access modifiers page. priv fn <name>(<args>): <return type> { <body> } Where <name> is the name of the function, <args> is the arguments of the function, <return type> is the return type of the function, and <body> is the body of the function. For example: priv fn add(x: int, y: int): int { return x + y; }","title":"Access modifiers"},{"location":"language/functions/#function-overloading","text":"A function can be overloaded. This means that a function can have multiple definitions. The syntax for declaring a function overload is as follows: fn <name>(<args>): <return type> { <body> } fn <name>(<args>): <return type> { <body> } Where <name> is the name of the function, <args> is the arguments of the function, <return type> is the return type of the function, and <body> is the body of the function. For example: fn add(x: int, y: int): int { return x + y; } fn add(x: int, y: int, z: int): int { return x + y + z; }","title":"Function overloading"},{"location":"language/syntax/","text":"Syntax \u00b6 Warning Wally is still in development, and the syntax and features are subject to change. Wally is a programming language that is designed to be easy to read and write. It is a statically typed language, but it is not a compiled language Table of Contents \u00b6 Types Access modifiers Variables Functions","title":"Syntax"},{"location":"language/syntax/#syntax","text":"Warning Wally is still in development, and the syntax and features are subject to change. Wally is a programming language that is designed to be easy to read and write. It is a statically typed language, but it is not a compiled language","title":"Syntax"},{"location":"language/syntax/#table-of-contents","text":"Types Access modifiers Variables Functions","title":"Table of Contents"},{"location":"language/types/","text":"Types \u00b6 Warning Wally is still in development, and the syntax and features are subject to change. Wally is a statically typed language. This means that every variable and function must have a specified type. Wally has the following types: Please note that this is a work in progress. The types listed here are not final. int - A 32-bit integer float - A 32-bit floating point number string - A string of characters char - A single character bool - A boolean value void - A special type that represents nothing","title":"Types"},{"location":"language/types/#types","text":"Warning Wally is still in development, and the syntax and features are subject to change. Wally is a statically typed language. This means that every variable and function must have a specified type. Wally has the following types: Please note that this is a work in progress. The types listed here are not final. int - A 32-bit integer float - A 32-bit floating point number string - A string of characters char - A single character bool - A boolean value void - A special type that represents nothing","title":"Types"},{"location":"language/variables/","text":"Variables \u00b6 Warning Wally is still in development, and the syntax and features are subject to change. A variable in Wally consists of a name, a type and a value. The name is used to refer to the variable, the type is used to determine what kind of value the variable can hold, and the value is the actual value of the variable. Declaring a variable \u00b6 A variable can be declared using the var keyword. The syntax for declaring a variable is as follows: var <name>: <type> = <value>; Where <name> is the name of the variable, <type> is the type of the variable, and <value> is the value of the variable. For example: var x: int = 5; Assigning a value to a variable \u00b6 A variable can be assigned a value using the = operator. The syntax for assigning a value to a variable is as follows: <name> = <value>; Where <name> is the name of the variable, and <value> is the value of the variable. For example: x = 10; Immutable variables \u00b6 A mutable variable (meaning that the value is not constant, it can be changed) can be declared using the var keyword (see above). But if you want to declare a variable as immutable (meaning that the value is constant, it cannot be changed), you can put the const keyword in front of the var keyword. The syntax for declaring an immutable variable is as follows: const var <name>: <type> = <value>; Where <name> is the name of the variable, <type> is the type of the variable, and <value> is the value of the variable. For example: const var x: int = 5;","title":"Variables"},{"location":"language/variables/#variables","text":"Warning Wally is still in development, and the syntax and features are subject to change. A variable in Wally consists of a name, a type and a value. The name is used to refer to the variable, the type is used to determine what kind of value the variable can hold, and the value is the actual value of the variable.","title":"Variables"},{"location":"language/variables/#declaring-a-variable","text":"A variable can be declared using the var keyword. The syntax for declaring a variable is as follows: var <name>: <type> = <value>; Where <name> is the name of the variable, <type> is the type of the variable, and <value> is the value of the variable. For example: var x: int = 5;","title":"Declaring a variable"},{"location":"language/variables/#assigning-a-value-to-a-variable","text":"A variable can be assigned a value using the = operator. The syntax for assigning a value to a variable is as follows: <name> = <value>; Where <name> is the name of the variable, and <value> is the value of the variable. For example: x = 10;","title":"Assigning a value to a variable"},{"location":"language/variables/#immutable-variables","text":"A mutable variable (meaning that the value is not constant, it can be changed) can be declared using the var keyword (see above). But if you want to declare a variable as immutable (meaning that the value is constant, it cannot be changed), you can put the const keyword in front of the var keyword. The syntax for declaring an immutable variable is as follows: const var <name>: <type> = <value>; Where <name> is the name of the variable, <type> is the type of the variable, and <value> is the value of the variable. For example: const var x: int = 5;","title":"Immutable variables"}]}